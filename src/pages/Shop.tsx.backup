import { useState, useEffect } from "react";
import { Search, ShoppingCart, Filter, Grid3X3, List, Package, Star, Calendar } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import { useCartActions } from "@/hooks/useCartActions";
import { useAuth } from "@/contexts/AuthContext";
import { useTranslation } from 'react-i18next';
import { useCardsData } from "@/hooks/useCardsData";
import { useSetsData } from "@/hooks/useSetsData";
import { useSeriesData } from "@/hooks/useSeriesData";

const Shop = () => {
  const { t } = useTranslation();
  const [activeTab, setActiveTab] = useState("cards");

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Header */}
      <div className="text-center mb-12">
        <h1 className="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-black mb-8 uppercase tracking-wider">
          <span className="bg-yellow-400 text-black px-3 sm:px-4 md:px-6 py-2 sm:py-3 border-2 sm:border-4 border-black shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] sm:shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] inline-block">
            {t('shop.title')}
          </span>
        </h1>
        <p className="text-base sm:text-lg md:text-xl text-muted-foreground font-bold">
          {t('shop.subtitle')}
        </p>
      </div>

      {/* Tabs for different shop categories */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-3 mb-8">
          <TabsTrigger value="cards" className="flex items-center gap-2">
            <Grid3X3 className="h-4 w-4" />
            {t('shop.shopFromCards')}
          </TabsTrigger>
          <TabsTrigger value="sets" className="flex items-center gap-2">
            <Package className="h-4 w-4" />
            {t('shop.shopFromSets')}
          </TabsTrigger>
          <TabsTrigger value="series" className="flex items-center gap-2">
            <Star className="h-4 w-4" />
            {t('shop.shopFromSeries')}
          </TabsTrigger>
        </TabsList>

        {/* Shop from Cards Tab */}
        <TabsContent value="cards">
          <ShopFromCards />
        </TabsContent>

        {/* Shop from Sets Tab */}
        <TabsContent value="sets">
          <ShopFromSets />
        </TabsContent>

        {/* Shop from Series Tab */}
        <TabsContent value="series">
          <ShopFromSeries />
        </TabsContent>
      </Tabs>
    </div>
  );
};

// Component for shopping individual cards
const ShopFromCards = () => {
  const { t } = useTranslation();
  const [searchTerm, setSearchTerm] = useState("");
  const [priceFilter, setPriceFilter] = useState("all");
  const [rarityFilter, setRarityFilter] = useState("all");
  const [sortBy, setSortBy] = useState("newest");
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(20);
  const { toast } = useToast();
  const { user } = useAuth();
  const { addToCart, isLoading } = useCartActions();

  // Helper function to get consistent mock price based on rarity and card ID
  const getMockPrice = (rarity: string, cardId: string) => {
    // Use card ID to generate consistent price for each card
    const hash = cardId.split('').reduce((a, b) => {
      a = ((a << 5) - a) + b.charCodeAt(0);
      return a & a;
    }, 0);
    const random = Math.abs(hash) / 2147483647; // Normalize to 0-1
    
    switch (rarity) {
      case 'common':
        return random * 5 + 1; // 1-6 CHF
      case 'rare':
        return random * 20 + 5; // 5-25 CHF
      case 'epic':
        return random * 50 + 25; // 25-75 CHF
      case 'legendary':
        return random * 200 + 100; // 100-300 CHF
      default:
        return random * 10 + 2; // 2-12 CHF
    }
  };

  // Helper function to get consistent stock based on card ID
  const getMockStock = (cardId: string) => {
    // Use card ID to generate consistent stock for each card
    const hash = cardId.split('').reduce((a, b) => {
      a = ((a << 5) - a) + b.charCodeAt(0);
      return a & a;
    }, 0);
    const random = Math.abs(hash) / 2147483647; // Normalize to 0-1
    return Math.floor(random * 20) + 1; // 1-20 stock
  };

  // Use real TCG API data - fetch a reasonable amount for filtering
  const { data: cardsData = [], isLoading: cardsLoading } = useCardsData({
    searchTerm: searchTerm || undefined,
    rarity: rarityFilter === "all" ? undefined : rarityFilter,
    limit: 100, // Fetch 100 cards for filtering
    offset: 0
  });

  // Reset pagination when search or filters change
  useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm, priceFilter, rarityFilter, sortBy]);

  // Filter cards based on price (mock pricing for now)
  let filteredCards = cardsData.filter(card => {
    // Mock price calculation based on rarity
    const mockPrice = getMockPrice(card.rarity, card.card_id);
    
    let matchesPrice = true;
    switch (priceFilter) {
      case "under25":
        matchesPrice = mockPrice < 25;
        break;
      case "25to50":
        matchesPrice = mockPrice >= 25 && mockPrice <= 50;
        break;
      case "50to100":
        matchesPrice = mockPrice >= 50 && mockPrice <= 100;
        break;
      case "over100":
        matchesPrice = mockPrice > 100;
        break;
      default:
        matchesPrice = true; // Show all cards when no price filter is selected
    }
    
    return matchesPrice;
  });

  // Sort cards
  filteredCards = filteredCards.sort((a, b) => {
    const priceA = getMockPrice(a.rarity, a.card_id);
    const priceB = getMockPrice(b.rarity, b.card_id);
    
    switch (sortBy) {
      case "price-low":
        return priceA - priceB;
      case "price-high":
        return priceB - priceA;
      case "name":
        return a.name.localeCompare(b.name);
      case "rarity":
        const rarityOrder = { common: 0, rare: 1, epic: 2, legendary: 3 };
        return rarityOrder[b.rarity as keyof typeof rarityOrder] - rarityOrder[a.rarity as keyof typeof rarityOrder];
      default:
        return 0;
    }
  });

  // Apply pagination to filtered and sorted cards - ensure exactly 20 cards
  const totalPages = Math.ceil(filteredCards.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = Math.min(startIndex + itemsPerPage, filteredCards.length);
  const paginatedCards = filteredCards.slice(startIndex, endIndex);

  // Debug logging to track card counts
  console.log('Card counts:', {
    fetched: cardsData.length,
    filtered: filteredCards.length,
    paginated: paginatedCards.length,
    currentPage,
    itemsPerPage,
    startIndex,
    endIndex
  });

  const handleAddToCart = async (card: any) => {
    if (!user) {
      toast({
        title: t('auth.loginRequired'),
        description: t('auth.loginRequiredCart'),
        variant: "destructive",
      });
      return;
    }

    try {
      const mockPrice = getMockPrice(card.rarity, card.card_id);
      await addToCart({
        article_number: card.card_id,
        price: mockPrice,
        quantity: 1
      });
      toast({
        title: t('shop.addedToCart'),
        description: `${card.name} ${t('shop.addedToCart')}`,
      });
    } catch (error) {
      console.error('Error adding to cart:', error);
    }
  };

  return (
    <div>
      {/* Search and Filters */}
      <div className="space-y-4 mb-8">
        <div className="flex flex-col lg:flex-row gap-4">
          <div className="relative flex-1">
            <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-500 h-5 w-5 z-10" />
            <Input
              placeholder={t('shop.searchPlaceholder')}
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-12 pr-4 py-3 text-lg border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 bg-white shadow-lg hover:shadow-xl transition-all duration-200 rounded-lg"
            />
          </div>
          
          <div className="flex gap-2">
            <Button
              variant={viewMode === "grid" ? "default" : "outline"}
              onClick={() => setViewMode("grid")}
              size="sm"
            >
              <Grid3X3 className="h-4 w-4" />
            </Button>
            <Button
              variant={viewMode === "list" ? "default" : "outline"}
              onClick={() => setViewMode("list")}
              size="sm"
            >
              <List className="h-4 w-4" />
            </Button>
          </div>
        </div>

        {/* Filter Buttons */}
        <div className="flex flex-wrap gap-4">
          {/* Price Filters */}
          <div className="flex gap-2">
            <Button
              variant={priceFilter === "all" ? "default" : "outline"}
              onClick={() => setPriceFilter("all")}
              size="sm"
            >
              {t('shop.allPrices')}
            </Button>
            <Button
              variant={priceFilter === "under25" ? "default" : "outline"}
              onClick={() => setPriceFilter("under25")}
              size="sm"
            >
              {t('shop.under25')}
            </Button>
            <Button
              variant={priceFilter === "25to50" ? "default" : "outline"}
              onClick={() => setPriceFilter("25to50")}
              size="sm"
            >
              {t('shop.price25to50')}
            </Button>
            <Button
              variant={priceFilter === "50to100" ? "default" : "outline"}
              onClick={() => setPriceFilter("50to100")}
              size="sm"
            >
              {t('shop.price50to100')}
            </Button>
            <Button
              variant={priceFilter === "over100" ? "default" : "outline"}
              onClick={() => setPriceFilter("over100")}
              size="sm"
            >
              {t('shop.over100')}
            </Button>
          </div>

          {/* Sort Options */}
          <div className="flex gap-2">
            <Button
              variant={sortBy === "price-low" ? "default" : "outline"}
              onClick={() => setSortBy("price-low")}
              size="sm"
            >
              {t('shop.priceLow')}
            </Button>
            <Button
              variant={sortBy === "price-high" ? "default" : "outline"}
              onClick={() => setSortBy("price-high")}
              size="sm"
            >
              {t('shop.priceHigh')}
            </Button>
            <Button
              variant={sortBy === "rarity" ? "default" : "outline"}
              onClick={() => setSortBy("rarity")}
              size="sm"
            >
              {t('cards.rarity')}
            </Button>
          </div>
        </div>
      </div>

      {/* Total Count Display */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
        <div className="flex justify-between items-center">
          <div>
            <h3 className="text-lg font-semibold text-blue-900">
              {filteredCards.length} {filteredCards.length !== 1 ? 'Cards' : 'Card'} Found
            </h3>
            <p className="text-sm text-blue-700">
              Showing {paginatedCards.length} of {filteredCards.length} cards
              {totalPages > 1 && ` • Page ${currentPage} of ${totalPages}`}
            </p>
            <p className="text-xs text-blue-600 mt-1">
              Debug: Fetched {cardsData.length} • Filtered {filteredCards.length} • Displaying {paginatedCards.length}
            </p>
          </div>
          <div className="flex items-center gap-2">
            <span className="text-sm text-blue-700">Stock:</span>
            <Badge variant="secondary" className="bg-blue-100 text-blue-800">In Stock</Badge>
          </div>
        </div>
      </div>

      {/* Loading State */}
      {cardsLoading ? (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          {[...Array(8)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <div className="aspect-[3/4] bg-muted"></div>
              <CardContent className="p-4">
                <div className="h-6 bg-muted rounded mb-2"></div>
                <div className="h-4 bg-muted rounded"></div>
              </CardContent>
            </Card>
          ))}
        </div>
      ) : (
        /* Cards Display */
        viewMode === "grid" ? (
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {paginatedCards.map((card) => {
                const mockPrice = getMockPrice(card.rarity, card.card_id);
                const stock = getMockStock(card.card_id); // Consistent stock
                return (
                  <div key={card.card_id} className="relative group">
                    <Card className="overflow-hidden hover:shadow-lg transition-all duration-300 group-hover:scale-105 w-full flex flex-col">
                      <div className="relative aspect-[3/4] overflow-visible">
                        <img
                          src={card.image_url || "/placeholder.svg"}
                          alt={card.name}
                          className="w-full h-full object-contain transition-transform duration-300 group-hover:scale-110"
                          onError={(e) => {
                            (e.target as HTMLImageElement).src = "/placeholder.svg";
                          }}
                        />
                        
                        {/* Overlay with buttons - positioned over the image */}
                        <div className="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
                          <div className="space-y-2">
                            <Button 
                              onClick={() => handleAddToCart(card)}
                              disabled={isLoading}
                              className="w-full"
                            >
                              <ShoppingCart className="mr-2 h-4 w-4" />
                              {t('shop.addToCart')}
                            </Button>
                          </div>
                        </div>

                        {/* Stock indicator */}
                        <div className="absolute top-2 right-2">
                          <Badge variant={stock > 5 ? "default" : "destructive"} className="text-xs">
                            {stock > 5 ? t('shop.inStock') : `${stock} ${t('shop.left')}`}
                          </Badge>
                        </div>
                      </div>

                      <CardContent className="p-4 flex flex-col justify-between flex-1">
                        <div>
                          <h3 className="font-semibold text-lg mb-2 line-clamp-2">{card.name}</h3>
                          <p className="text-muted-foreground text-sm mb-2">{card.set_name} • {card.card_number}</p>
                        </div>
                        <div className="flex justify-between items-center mt-auto">
                          <div className="text-right">
                            <div className="text-xl font-bold text-primary">CHF {mockPrice.toFixed(2)}</div>
                          </div>
                          <Badge variant="secondary">{card.rarity}</Badge>
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                );
              })}
            </div>
          </div>
        ) : (
          <div className="space-y-3">
            {paginatedCards.map((card) => {
              const mockPrice = getMockPrice(card.rarity, card.card_id);
              const stock = getMockStock(card.card_id); // Consistent stock
              return (
                <Card key={card.card_id} className="hover:shadow-md transition-shadow">
                  <CardContent className="p-4">
                    <div className="flex items-center gap-4">
                      {/* Smaller card image */}
                      <div className="w-16 h-20 flex-shrink-0">
                        <img
                          src={card.image_url || "/placeholder.svg"}
                          alt={card.name}
                          className="w-full h-full object-contain rounded-md bg-gray-50"
                          onError={(e) => {
                            (e.target as HTMLImageElement).src = "/placeholder.svg";
                          }}
                        />
                      </div>
                      
                      {/* Card details */}
                      <div className="flex-1 min-w-0">
                        <div className="flex justify-between items-start">
                          <div className="min-w-0 flex-1">
                            <h3 className="font-semibold text-base truncate">{card.name}</h3>
                            <p className="text-sm text-muted-foreground truncate">{card.set_name} • {card.card_number}</p>
                          </div>
                          <div className="text-right ml-4">
                            <div className="text-lg font-bold text-primary">CHF {mockPrice.toFixed(2)}</div>
                          </div>
                        </div>
                      </div>
                      
                      {/* Badges and actions */}
                      <div className="flex items-center gap-3 flex-shrink-0">
                        <div className="flex flex-col gap-1">
                          <Badge variant="secondary" className="text-xs">{card.rarity}</Badge>
                          <Badge variant={stock > 5 ? "default" : "destructive"} className="text-xs">
                            {stock > 5 ? 'In Stock' : `${stock} left`}
                          </Badge>
                        </div>
                        <Button 
                          onClick={() => handleAddToCart(card)}
                          disabled={isLoading}
                          size="sm"
                        >
                          <ShoppingCart className="mr-2 h-4 w-4" />
                          Add to Cart
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        )
      )}

      {/* Empty State */}
      {!cardsLoading && filteredCards.length === 0 && (
        <div className="text-center py-12">
          <ShoppingCart className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
          <h3 className="text-lg font-medium mb-2">{t('shop.noCardsFound')}</h3>
          <p className="text-muted-foreground">
            {t('shop.noCardsSubtitle')}
          </p>
        </div>
      )}

      {/* Pagination */}
      {!cardsLoading && filteredCards.length > 0 && (
        <div className="flex justify-center items-center gap-2 mt-8">
          <Button
            variant="outline"
            onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
            disabled={currentPage === 1}
          >
            {t('common.previous')}
          </Button>
          
          <div className="flex items-center gap-1">
            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
              const pageNum = i + 1;
              return (
                <Button
                  key={pageNum}
                  variant={currentPage === pageNum ? "default" : "outline"}
                  size="sm"
                  onClick={() => setCurrentPage(pageNum)}
                >
                  {pageNum}
                </Button>
              );
            })}
          </div>
          
          <Button
            variant="outline"
            onClick={() => setCurrentPage(prev => prev + 1)}
            disabled={currentPage >= totalPages}
          >
            {t('common.next')}
          </Button>
        </div>
      )}
    </div>
  );
};

// Component for shopping complete sets
const ShopFromSets = () => {
  const { t } = useTranslation();
  const [searchTerm, setSearchTerm] = useState("");
  const [languageFilter, setLanguageFilter] = useState("all");
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(12);
  const { toast } = useToast();
  const { user } = useAuth();
  const { addToCart, isLoading } = useCartActions();

  // Reset pagination when search or filters change
  useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm, languageFilter]);

  // Use real TCG API data - fetch more data for client-side pagination
  const { data: setsData = [], isLoading: setsLoading } = useSetsData({
    language: languageFilter === "all" ? undefined : languageFilter,
    searchTerm: searchTerm || undefined,
    limit: 100, // Fetch more data for client-side pagination
    offset: 0
  });

  // Apply pagination to sets data
  const totalPages = Math.ceil(setsData.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const paginatedSets = setsData.slice(startIndex, endIndex);

  const handleAddSetToCart = async (set: any) => {
    if (!user) {
      toast({
        title: t('auth.loginRequired'),
        description: t('auth.loginRequiredCart'),
        variant: "destructive",
      });
      return;
    }

    try {
      // Mock price for complete set - in real app this would come from the database
      const setPrice = (set.total || 50) * 2.99; // Estimated price per card
      await addToCart({
        article_number: `set-${set.set_id}`,
        price: setPrice,
        quantity: 1
      });
      toast({
        title: t('shop.addedToCart'),
        description: `${set.name} ${t('shop.setAddedToCart')}`,
      });
    } catch (error) {
      console.error('Error adding set to cart:', error);
    }
  };

  return (
    <div>
      {/* Search and View Toggle */}
      <div className="space-y-4 mb-8">
        <div className="flex flex-col lg:flex-row gap-4">
          <div className="relative flex-1">
            <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-500 h-5 w-5 z-10" />
            <Input
              placeholder={t('sets.searchPlaceholder')}
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-12 pr-4 py-3 text-lg border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 bg-white shadow-lg hover:shadow-xl transition-all duration-200 rounded-lg"
            />
          </div>
          
          <div className="flex gap-2">
            <Button
              variant={viewMode === "grid" ? "default" : "outline"}
              onClick={() => setViewMode("grid")}
              size="sm"
            >
              <Grid3X3 className="h-4 w-4" />
            </Button>
            <Button
              variant={viewMode === "list" ? "default" : "outline"}
              onClick={() => setViewMode("list")}
              size="sm"
            >
              <List className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>

      {/* Total Count Display for Sets */}
      <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
        <div className="flex justify-between items-center">
          <div>
            <h3 className="text-lg font-semibold text-green-900">
              {setsData.length} {setsData.length !== 1 ? 'Sets' : 'Set'} Found
            </h3>
            <p className="text-sm text-green-700">
              Showing {paginatedSets.length} of {setsData.length} sets
              {totalPages > 1 && ` • Page ${currentPage} of ${totalPages}`}
            </p>
          </div>
          <div className="flex items-center gap-2">
            <span className="text-sm text-green-700">Complete Sets:</span>
            <Badge variant="secondary" className="bg-green-100 text-green-800">Available</Badge>
          </div>
        </div>
      </div>

      {/* Sets Display */}
      {setsLoading ? (
        viewMode === "grid" ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {[...Array(8)].map((_, i) => (
              <Card key={i} className="border-4 border-black animate-pulse h-96">
                <div className="h-48 bg-muted"></div>
                <CardHeader className="p-4">
                  <div className="h-6 bg-muted rounded mb-2"></div>
                  <div className="h-4 bg-muted rounded"></div>
                </CardHeader>
              </Card>
            ))}
          </div>
        ) : (
          <div className="space-y-4">
            {[...Array(8)].map((_, i) => (
              <Card key={i} className="animate-pulse">
                <CardContent className="p-6">
                  <div className="flex gap-4">
                    <div className="w-24 h-32 bg-muted rounded-lg"></div>
                    <div className="flex-1">
                      <div className="h-6 bg-muted rounded mb-2"></div>
                      <div className="h-4 bg-muted rounded"></div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )
      ) : (
        viewMode === "grid" ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {paginatedSets.map((set) => {
              const setPrice = (set.total || 50) * 2.99;
              return (
                <Card key={set.set_id} className="border-4 border-black hover:scale-105 transition-all duration-300 hover:shadow-xl group h-96 flex flex-col">
                  <div className="h-48 bg-white flex items-center justify-center p-4 overflow-hidden flex-shrink-0 relative">
                    {set.logo_url ? (
                      <img
                        src={set.logo_url}
                        alt={set.name || 'Set Logo'}
                        className="max-h-full max-w-full object-contain pixelated group-hover:scale-110 transition-transform duration-500"
                      />
                    ) : (
                      <div className="text-black font-black text-xl text-center">
                        {set.name}
                      </div>
                    )}
                    
                    {/* Overlay with buy button */}
                    <div className="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
                      <Button 
                        onClick={() => handleAddSetToCart(set)}
                        disabled={isLoading}
                        className="bg-green-600 hover:bg-green-700"
                      >
                        <ShoppingCart className="mr-2 h-4 w-4" />
                        {t('shop.buyCompleteSet')}
                      </Button>
                    </div>
                  </div>
                  
                  <CardHeader className="bg-background flex-1 flex flex-col justify-between p-4">
                    <div>
                      <CardTitle className="font-black text-lg uppercase tracking-wide line-clamp-2">
                        {set.name || t('sets.unknownSet')}
                      </CardTitle>
                      <CardDescription className="font-bold text-muted-foreground">
                        {t('sets.cardCount')}: {set.total || 0}
                      </CardDescription>
                    </div>
                    <div className="mt-4">
                      <div className="text-2xl font-bold text-green-600">
                        CHF {setPrice.toFixed(2)}
                      </div>
                      <div className="text-sm text-muted-foreground">
                        {t('shop.completeSet')}
                      </div>
                    </div>
                  </CardHeader>
                </Card>
              );
            })}
          </div>
        ) : (
          <div className="space-y-4">
            {paginatedSets.map((set) => {
              const setPrice = (set.total || 50) * 2.99;
              return (
                <Card key={set.set_id} className="hover:shadow-md transition-shadow">
                  <CardContent className="p-6">
                    <div className="flex gap-4">
                      <div className="w-24 h-32 flex-shrink-0">
                        {set.logo_url ? (
                          <img
                            src={set.logo_url}
                            alt={set.name || 'Set Logo'}
                            className="w-full h-full object-contain rounded-lg"
                          />
                        ) : (
                          <div className="w-full h-full bg-white border-2 border-black rounded-lg flex items-center justify-center">
                            <div className="text-black font-black text-sm text-center">
                              {set.name}
                            </div>
                          </div>
                        )}
                      </div>
                      <div className="flex-1">
                        <div className="flex justify-between items-start mb-2">
                          <div>
                            <h3 className="font-semibold text-lg">{set.name || t('sets.unknownSet')}</h3>
                            <p className="text-muted-foreground">{t('sets.cardCount')}: {set.total || 0}</p>
                          </div>
                          <div className="text-right">
                            <div className="text-2xl font-bold text-green-600">CHF {setPrice.toFixed(2)}</div>
                          </div>
                        </div>
                        <div className="flex justify-between items-center">
                          <div className="text-sm text-muted-foreground">
                            {t('shop.completeSet')}
                          </div>
                          <Button 
                            onClick={() => handleAddSetToCart(set)}
                            disabled={isLoading}
                            className="bg-green-600 hover:bg-green-700"
                          >
                            <ShoppingCart className="mr-2 h-4 w-4" />
                            {t('shop.buyCompleteSet')}
                          </Button>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        )
      )}

      {/* Empty State */}
      {!setsLoading && paginatedSets.length === 0 && (
        <div className="text-center py-12">
          <Package className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
          <h3 className="text-lg font-medium mb-2">{t('sets.noSetsFound')}</h3>
          <p className="text-muted-foreground">
            {t('sets.noSetsFoundSubtitle')}
          </p>
        </div>
      )}

      {/* Pagination */}
      {!setsLoading && paginatedSets.length > 0 && (
        <div className="flex justify-center items-center gap-2 mt-8">
          <Button
            variant="outline"
            onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
            disabled={currentPage === 1}
          >
            {t('common.previous')}
          </Button>
          
          <div className="flex items-center gap-1">
            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
              const pageNum = i + 1;
              return (
                <Button
                  key={pageNum}
                  variant={currentPage === pageNum ? "default" : "outline"}
                  size="sm"
                  onClick={() => setCurrentPage(pageNum)}
                >
                  {pageNum}
                </Button>
              );
            })}
          </div>
          
          <Button
            variant="outline"
            onClick={() => setCurrentPage(prev => prev + 1)}
            disabled={currentPage >= totalPages}
          >
            {t('common.next')}
          </Button>
        </div>
      )}
    </div>
  );
};

// Component for shopping complete series
const ShopFromSeries = () => {
  const { t } = useTranslation();
  const [searchTerm, setSearchTerm] = useState("");
  const [languageFilter, setLanguageFilter] = useState("all");
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(12);
  const { toast } = useToast();
  const { user } = useAuth();
  const { addToCart, isLoading } = useCartActions();

  // Reset pagination when search or filters change
  useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm, languageFilter]);

  // Use real TCG API data - fetch more data for client-side pagination
  const { data: seriesData = [], isLoading: seriesLoading } = useSeriesData({
    language: languageFilter === "all" ? undefined : languageFilter,
    searchTerm: searchTerm || undefined,
    limit: 100, // Fetch more data for client-side pagination
    offset: 0
  });

  // Apply pagination to series data
  const totalPages = Math.ceil(seriesData.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const paginatedSeries = seriesData.slice(startIndex, endIndex);

  const handleAddSeriesToCart = async (series: any) => {
    if (!user) {
      toast({
        title: t('auth.loginRequired'),
        description: t('auth.loginRequiredCart'),
        variant: "destructive",
      });
      return;
    }

    try {
      // Mock price for complete series - in real app this would come from the database
      const seriesPrice = 299.99; // Estimated price for complete series
      await addToCart({
        article_number: `series-${series.series_id}`,
        price: seriesPrice,
        quantity: 1
      });
      toast({
        title: t('shop.addedToCart'),
        description: `${series.series_name} ${t('shop.seriesAddedToCart')}`,
      });
    } catch (error) {
      console.error('Error adding series to cart:', error);
    }
  };

  return (
    <div>
      {/* Search and View Toggle */}
      <div className="space-y-4 mb-8">
        <div className="flex flex-col lg:flex-row gap-4">
          <div className="relative flex-1">
            <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-500 h-5 w-5 z-10" />
            <Input
              placeholder={t('series.searchPlaceholder')}
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-12 pr-4 py-3 text-lg border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 bg-white shadow-lg hover:shadow-xl transition-all duration-200 rounded-lg"
            />
          </div>
          
          <div className="flex gap-2">
            <Button
              variant={viewMode === "grid" ? "default" : "outline"}
              onClick={() => setViewMode("grid")}
              size="sm"
            >
              <Grid3X3 className="h-4 w-4" />
            </Button>
            <Button
              variant={viewMode === "list" ? "default" : "outline"}
              onClick={() => setViewMode("list")}
              size="sm"
            >
              <List className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>

      {/* Total Count Display for Series */}
      <div className="bg-purple-50 border border-purple-200 rounded-lg p-4 mb-6">
        <div className="flex justify-between items-center">
          <div>
            <h3 className="text-lg font-semibold text-purple-900">
              {seriesData.length} {seriesData.length !== 1 ? 'Series' : 'Series'} Found
            </h3>
            <p className="text-sm text-purple-700">
              Showing {paginatedSeries.length} of {seriesData.length} series
              {totalPages > 1 && ` • Page ${currentPage} of ${totalPages}`}
            </p>
          </div>
          <div className="flex items-center gap-2">
            <span className="text-sm text-purple-700">Complete Series:</span>
            <Badge variant="secondary" className="bg-purple-100 text-purple-800">Available</Badge>
          </div>
        </div>
      </div>

      {/* Series Display */}
      {seriesLoading ? (
        viewMode === "grid" ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {[...Array(8)].map((_, i) => (
              <Card key={i} className="border-4 border-black animate-pulse h-96">
                <div className="h-48 bg-muted"></div>
                <CardHeader className="p-4">
                  <div className="h-6 bg-muted rounded mb-2"></div>
                  <div className="h-4 bg-muted rounded"></div>
                </CardHeader>
              </Card>
            ))}
          </div>
        ) : (
          <div className="space-y-4">
            {[...Array(8)].map((_, i) => (
              <Card key={i} className="animate-pulse">
                <CardContent className="p-6">
                  <div className="flex gap-4">
                    <div className="w-24 h-32 bg-muted rounded-lg"></div>
                    <div className="flex-1">
                      <div className="h-6 bg-muted rounded mb-2"></div>
                      <div className="h-4 bg-muted rounded"></div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )
      ) : (
        viewMode === "grid" ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {paginatedSeries.map((series) => (
              <Card key={series.series_id} className="border-4 border-black hover:scale-105 transition-all duration-300 hover:shadow-xl group h-96 flex flex-col">
                <div className="h-48 bg-white flex items-center justify-center p-4 overflow-hidden flex-shrink-0 relative">
                  {series.logo_url ? (
                    <img 
                      src={series.logo_url} 
                      alt={series.series_name || 'Series'} 
                      className="max-h-full max-w-full object-contain pixelated group-hover:scale-110 transition-transform duration-500"
                    />
                  ) : (
                    <div className="text-black font-black text-xl text-center">
                      <Star className="h-16 w-16 mx-auto mb-2" />
                      {series.series_name}
                    </div>
                  )}
                  
                  {/* Overlay with buy button */}
                  <div className="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
                    <Button 
                      onClick={() => handleAddSeriesToCart(series)}
                      disabled={isLoading}
                      className="bg-purple-600 hover:bg-purple-700"
                    >
                      <ShoppingCart className="mr-2 h-4 w-4" />
                      {t('shop.buyCompleteSeries')}
                    </Button>
                  </div>
                </div>
                
                <CardHeader className="bg-background flex-1 flex flex-col justify-between p-4">
                  <div>
                    <CardTitle className="font-black text-lg uppercase tracking-wide line-clamp-2">
                      {series.series_name}
                    </CardTitle>
                    <CardDescription className="font-bold text-muted-foreground">
                      ID: {series.series_id}
                    </CardDescription>
                  </div>
                  <div className="mt-4">
                    <div className="text-2xl font-bold text-purple-600">
                      CHF 299.99
                    </div>
                    <div className="text-sm text-muted-foreground">
                      {t('shop.completeSeries')}
                    </div>
                  </div>
                </CardHeader>
              </Card>
            ))}
          </div>
        ) : (
          <div className="space-y-4">
            {paginatedSeries.map((series) => (
              <Card key={series.series_id} className="hover:shadow-md transition-shadow">
                <CardContent className="p-6">
                  <div className="flex gap-4">
                    <div className="w-24 h-32 flex-shrink-0">
                      {series.logo_url ? (
                        <img 
                          src={series.logo_url} 
                          alt={series.series_name || 'Series'} 
                          className="w-full h-full object-contain rounded-lg"
                        />
                      ) : (
                        <div className="w-full h-full bg-white border-2 border-black rounded-lg flex items-center justify-center">
                          <Star className="h-8 w-8 text-black mb-1" />
                          <div className="text-black font-black text-sm text-center">
                            {series.series_name}
                          </div>
                        </div>
                      )}
                    </div>
                    <div className="flex-1">
                      <div className="flex justify-between items-start mb-2">
                        <div>
                          <h3 className="font-semibold text-lg">{series.series_name}</h3>
                          <p className="text-muted-foreground">ID: {series.series_id}</p>
                        </div>
                        <div className="text-right">
                          <div className="text-2xl font-bold text-purple-600">CHF 299.99</div>
                        </div>
                      </div>
                      <div className="flex justify-between items-center">
                        <div className="text-sm text-muted-foreground">
                          {t('shop.completeSeries')}
                        </div>
                        <Button 
                          onClick={() => handleAddSeriesToCart(series)}
                          disabled={isLoading}
                          className="bg-purple-600 hover:bg-purple-700"
                        >
                          <ShoppingCart className="mr-2 h-4 w-4" />
                          {t('shop.buyCompleteSeries')}
                        </Button>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )
      )}

      {/* Empty State */}
      {!seriesLoading && paginatedSeries.length === 0 && (
        <div className="text-center py-12">
          <Star className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
          <h3 className="text-lg font-medium mb-2">{t('series.noSeriesFound')}</h3>
          <p className="text-muted-foreground">
            {t('series.noSeriesSubtitle')}
          </p>
        </div>
      )}

      {/* Pagination */}
      {!seriesLoading && paginatedSeries.length > 0 && (
        <div className="flex justify-center items-center gap-2 mt-8">
          <Button
            variant="outline"
            onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
            disabled={currentPage === 1}
          >
            {t('common.previous')}
          </Button>
          
          <div className="flex items-center gap-1">
            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
              const pageNum = i + 1;
              return (
                <Button
                  key={pageNum}
                  variant={currentPage === pageNum ? "default" : "outline"}
                  size="sm"
                  onClick={() => setCurrentPage(pageNum)}
                >
                  {pageNum}
                </Button>
              );
            })}
          </div>
          
          <Button
            variant="outline"
            onClick={() => setCurrentPage(prev => prev + 1)}
            disabled={currentPage >= totalPages}
          >
            {t('common.next')}
          </Button>
        </div>
      )}
    </div>
  );
};

export default Shop;
